import * as functions from 'firebase-functions';
import * as admin from 'firebase-admin';
import express from 'express';
import cors from 'cors';
import helmet from 'helmet';

// Import routes
import authRoutes from './routes/auth';
import appointmentRoutes from './routes/appointments';
import paymentRoutes from './routes/payments';
import userRoutes from './routes/users';

// Import middleware
import { errorHandler } from './middleware/errorHandler';
import { notFound } from './middleware/notFound';
// Temporarily comment out complex middleware to get server running
// import { 
//   securityHeaders, 
//   requestLogger, 
//   sanitizeInput, 
//   requestSizeLimiter 
// } from './middleware/security';
// import { 
//   apiRateLimit, 
//   authRateLimit, 
//   paymentRateLimit, 
//   appointmentRateLimit,
//   adminRateLimit,
//   getRateLimitStats 
// } from './middleware/rateLimiter';

// Import services
import { emailService } from './services/emailService';
import { databaseService } from './utils/databaseService';

// Initialize Firebase Admin SDK
admin.initializeApp();

// Create Express app
const app = express();

// Trust proxy for accurate IP addresses
app.set('trust proxy', 1);

// Basic middleware
app.use(helmet());
app.use(cors({
  origin: [
    'http://localhost:3000',
    'http://localhost:3001', 
    'https://ccn-cleaning.vercel.app',
    'https://ccncleaning.com'
  ],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'X-CSRF-Token']
}));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    uptime: process.uptime()
  });
});

// API Routes
app.use('/auth', authRoutes);
app.use('/appointments', appointmentRoutes);
app.use('/payments', paymentRoutes);
app.use('/users', userRoutes);

// Error handling middleware
app.use(notFound);
app.use(errorHandler);

// Export the Express app as a Firebase Cloud Function
export const api = functions.https.onRequest(app);

// Additional Firebase Functions can be added here
export const sendWelcomeEmail = functions.auth.user().onCreate(async (user) => {
  const { email, displayName, uid } = user;
  
  try {
    functions.logger.info(`New user registered: ${email}`);
    
    // Send welcome email
    if (email && displayName) {
      await emailService.sendWelcomeEmail(email, displayName);
      functions.logger.info(`Welcome email sent to ${email}`);
    }
    
    // Create user document in Firestore
    const [firstName, lastName] = (displayName || '').split(' ');
    const userRef = admin.firestore().collection('users').doc(uid);
    await userRef.set({
      email: email || '',
      first_name: firstName || '',
      last_name: lastName || '',
      role: 'client',
      is_verified: false,
      created_at: admin.firestore.FieldValue.serverTimestamp(),
      updated_at: admin.firestore.FieldValue.serverTimestamp()
    });
    
    // Also create in our database service for dual-database support
    try {
      await databaseService.createUser({
        email: email || '',
        first_name: firstName || '',
        last_name: lastName || '',
        role: 'client',
        is_verified: false,
        created_at: new Date().toISOString()
      });
    } catch (dbError) {
      functions.logger.warn('Failed to create user in database service:', dbError);
    }
    
  } catch (error) {
    functions.logger.error('Error in sendWelcomeEmail function:', error);
  }
});

export const cleanupUserData = functions.auth.user().onDelete(async (user) => {
  // Clean up user data when account is deleted
  const userId = user.uid;
  const batch = admin.firestore().batch();
  
  // Delete user document
  const userRef = admin.firestore().collection('users').doc(userId);
  batch.delete(userRef);
  
  // Delete user's appointments
  const appointmentsSnapshot = await admin.firestore()
    .collection('appointments')
    .where('userId', '==', userId)
    .get();
    
  appointmentsSnapshot.docs.forEach((doc) => {
    batch.delete(doc.ref);
  });
  
  await batch.commit();
  console.log(`Cleaned up data for user ${userId}`);
});
